# -*- coding: utf-8 -*-
"""Car_counter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D05tw4cfupSaRILVkn8HcvSdXtfYGxYe
"""

import os
HOME = os.getcwd()
print(HOME)

from google.colab import drive
drive.mount('/content/drive/')

from google.colab.patches import cv2_imshow
!pip install ultralytics==8.0.28

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

from ultralytics import YOLO

pip install cvzone

import cvzone
import math
import cv2

!pip install opencv-python-headless
!pip install google-colab

pip install filterpy==1.4.5

pip install scikit-image

pip install lap==0.4.0

import sys
sys.path.insert(0,'/content/drive/MyDrive/101 - Object Detection /Pliki z kursu/Project 1 - Car Counter')

sys.path.append('/content/drive/MyDrive/101 - Object Detection /Pliki z kursu/Project 1 - Car Counter/sort.py')

!cp -r "/content/drive/MyDrive/101 - Object Detection /Pliki z kursu/Project 1 - Car Counter/sort.py" '/content/'

from sort import *

cap = cv2.VideoCapture('/content/drive/MyDrive/101 - Object Detection /Pliki z kursu/Videos/cars.mp4')

model= YOLO('/content/drive/MyDrive/101 - Object Detection /Pliki z kursu/yolov8n.pt')

classNames = ["person", "bicycle", "car", "motorbike", "aeroplane", "bus", "train", "truck", "boat",
              "traffic light", "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat",
              "dog", "horse", "sheep", "cow", "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella",
              "handbag", "tie", "suitcase", "frisbee", "skis", "snowboard", "sports ball", "kite", "baseball bat",
              "baseball glove", "skateboard", "surfboard", "tennis racket", "bottle", "wine glass", "cup",
              "fork", "knife", "spoon", "bowl", "banana", "apple", "sandwich", "orange", "broccoli",
              "carrot", "hot dog", "pizza", "donut", "cake", "chair", "sofa", "pottedplant", "bed",
              "diningtable", "toilet", "tvmonitor", "laptop", "mouse", "remote", "keyboard", "cell phone",
              "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase", "scissors",
              "teddy bear", "hair drier", "toothbrush"
              ]

mask = cv2.imread('/content/drive/MyDrive/101 - Object Detection /Pliki z kursu/Project 1 - Car Counter/mask.png')

tracker = Sort(max_age=20, min_hits=3, iou_threshold=0.3)

limits =[400,297,673,297]

while True:
    success, img = cap.read()
    imgRegion = cv2.bitwise_and(img, mask)

    detections = np.empty((0, 5))
    results = model(imgRegion,stream=True)
    for r in results:
        boxes = r.boxes
        for box in boxes:
            #bounding box
            x1,y1,x2,y2 = box.xyxy[0]
            x1, y1, x2, y2 = int(x1),int(y1),int(x2),int(y2)
            # cv2.rectangle(img,(x1,y1),(x2,y2),(255,0,255),3)
            w, h = x2-x1, y2-y1
            bbox = int(x1), int(y1), int(x2), int(y2)

            #confidence
            conf = math.ceil((box.conf[0]*100))/100
            print(conf)

            #clas name
            cls = int(box.cls[0])
            currentClass = classNames[cls]

            if currentClass == 'car' or currentClass == 'truck' or currentClass == 'bus' or \
                currentClass == 'motorbike' and conf > 0.3:
              # cvzone.putTextRect(img, f'{currentClass} {conf}', (max(0, x1), max(35, y1)),scale=2,thickness=2)
              # cvzone.cornerRect(img, (x1, y1, w, h,), l=9,rt=5)
              currentArray = np.array([x1, y1, x2, y2,conf])
              detections = np.vstack((detections, currentArray))

    resultsTracker = tracker.update(detections)
    cv2.line(img, (limits[0], limits[1]), (limits[2], limits[3]), (0, 255, 0), 5)



    for results in resultsTracker:
      x1,y1,x2,y2, id = results
      x1, y1, x2, y2 = int(x1),int(y1),int(x2),int(y2)
      print(results)
      w, h = x2-x1, y2-y1
      cvzone.cornerRect(img, (x1, y1, w, h,), l=9,rt=2, colorR=(255, 0, 0))
      cvzone.putTextRect(img, f' {int(id)}', (max(0, x1), max(35, y1)),scale=2,thickness=2)

      cx,cy = x1+w//2,y1+h//2
      cv2.circle(img,(cx,cy),5,(255,0,255),cv2.FILLED)



    cv2_imshow(img)
    # cv2_imshow("ImageRegion", imgRegion)
    cv2.waitKey(1)